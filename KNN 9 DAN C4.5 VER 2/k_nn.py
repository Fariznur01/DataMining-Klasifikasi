# -*- coding: utf-8 -*-
"""K-NN02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KUObSpYC6ZyoXSOtefO00gYU98qbugNm
"""

#Library sklearn Python

#untuk memisahkan data training dan testing
from sklearn.model_selection import train_test_split

#Pengujian Confusion Matrix
from sklearn.metrics import confusion_matrix

#untuk mengetahui skor
from sklearn.metrics import accuracy_score


#untuk evaluasi model
from sklearn.metrics import classification_report

#untuk dataframe
import   pandas as pd

#untuk model K-NN
from sklearn.neighbors import KNeighborsClassifier

#Plot
import seaborn as seabornInstance

#Pengujian Confusion Matrix
from sklearn.metrics import confusion_matrix

#untuk memasukan data 
dataset = pd.read_csv('data.csv')

dataset.head(20)

#jumlah baris dan kolom
dataset.info()

#melakukan Feature Scaling
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
dataset.columns

scaler.fit(dataset[['Radius_mean','Texture_mean',
       'Perimeter_mean','Area_mean', 'Smoothness_mean', 'Compactness_mean',
       'Concavity_mean','Concave_points_mean', 'Symmetry_mean',
       'Fractal_dimension_mean','Radius_se', 'Texture_se', 'Perimeter_se', 
       'Area_se', 'Smoothness_se','Compactness_se', 'Concavity_se', 
       'Concave_points_se', 'Symmetry_se','Fractal_dimension_se',
       'Radius_worst', 'Texture_worst','Perimeter_worst', 'Area_worst',
       'Smoothness_worst','Compactness_worst', 'Concavity_worst',
       'Concave_points_worst','Symmetry_worst','Fractal_dimension_worst']])

transformed = scaler.transform(dataset[['Radius_mean','Texture_mean',
       'Perimeter_mean','Area_mean', 'Smoothness_mean', 'Compactness_mean',
       'Concavity_mean','Concave_points_mean', 'Symmetry_mean',
       'Fractal_dimension_mean','Radius_se', 'Texture_se', 'Perimeter_se', 
       'Area_se', 'Smoothness_se','Compactness_se', 'Concavity_se', 
       'Concave_points_se', 'Symmetry_se','Fractal_dimension_se',
       'Radius_worst', 'Texture_worst','Perimeter_worst', 'Area_worst',
       'Smoothness_worst','Compactness_worst', 'Concavity_worst',
       'Concave_points_worst','Symmetry_worst','Fractal_dimension_worst']])

toMakeNewDataFrame = dataset[['Radius_mean','Texture_mean',
       'Perimeter_mean','Area_mean', 'Smoothness_mean', 'Compactness_mean',
       'Concavity_mean','Concave_points_mean', 'Symmetry_mean',
       'Fractal_dimension_mean','Radius_se', 'Texture_se', 'Perimeter_se', 
       'Area_se', 'Smoothness_se','Compactness_se', 'Concavity_se', 
       'Concave_points_se', 'Symmetry_se','Fractal_dimension_se',
       'Radius_worst', 'Texture_worst','Perimeter_worst', 'Area_worst',
       'Smoothness_worst','Compactness_worst', 'Concavity_worst',
       'Concave_points_worst','Symmetry_worst','Fractal_dimension_worst']]

fc = pd.DataFrame(transformed,columns=toMakeNewDataFrame.columns)
fc.info()

fc.head(20)

#untuk memisahkan data training dan testing
#X_train = data train
#X_test = data testing
#y_train = label train
#y_test = label test
X_train, X_test, y_train, y_test = train_test_split(fc, dataset['Diagnosis'], test_size=0.30, random_state=42)

X_train.head(10)

y_train.head(10)

X_test.head(10)

y_test.head(10)

#Mengaktifkan K-NN

knModel = KNeighborsClassifier(n_neighbors=9)
knModel.fit(X_train,y_train)

#Testing Data
prediksi = knModel.predict(X_test)
knModel.predict(X_test)

#Melakukan Score
print("Akurasi %0.2f" % accuracy_score(y_test, knModel.predict(X_test)))


prediksi02 = knModel.predict(X_test)
cm = confusion_matrix(y_test,prediksi02)
print('confusion matrix:\n',cm)

print(classification_report(y_test, knModel.predict(X_test)))

cm = confusion_matrix(y_test,prediksi)
seabornInstance.heatmap(cm,annot=True)
print(classification_report(prediksi,y_test))

#Melakukan Input Testing
#MEAN
#Radius_mean = float(input("Enter radius_mean: "))
#Texture_mean = float(input("Enter texture_mean: "))
#Perimeter_mean = float(input("Enter perimeter_mean: "))
#Area_mean = float(input("Enter area_mean: "))
#Smoothness_mean = float(input("Enter smoothness_mean: "))
#Compactness_mean = float(input("Enter compactness_mean: "))
#Concavity_mean = float(input("Enter concavity_mean: "))
#Concave_points_mean= float(input("Enter concave points_mean: "))
#Symmetry_mean = float(input("Enter symmetry_mean: "))
#Fractal_dimension_mean = float(input("Enter fractal_dimension_mean: "))
#SE
#Radius_se = float(input("Enter radius_se: "))
#Texture_se = float(input("Enter texture_se: "))
#Perimeter_se = float(input("Enter perimeter_se: "))
#Area_se = float(input("Enter area_se: "))
#Smoothness_se = float(input("Enter smoothness_se: "))
#Compactness_se = float(input("Enter compactness_se: "))
#Concavity_se = float(input("Enter concavity_se: "))
#Concave_points_se = float(input("Enter concave points_se: "))
#Symmetry_se = float(input("Enter symmetry_se: "))
#Fractal_dimension_se = float(input("Enter fractal_dimension_se: "))
#worst
#Radius_worst = float(input("Enter radius_worst: "))
#Texture_worst = float(input("Enter texture_worst: "))
#Perimeter_worst = float(input("Enter perimeter_worst: "))
#Area_worst = float(input("Enter area_worst: "))
#Smoothness_worst = float(input("Enter smoothness_worst: "))
#Compactness_worst = float(input("Enter compactness_worst: "))
#Concavity_worst = float(input("Enter concavity_worst: "))
#Concave_points_worst = float(input("Enter concave points_worst: "))
#Symmetry_worst = float(input("Enter symmetry_worst: "))
#Fractal_dimension_worst = float(input("Enter fractal_dimension_worst: "))

#result=  knModel.predict([[Radius_mean, Texture_mean, Perimeter_mean, Area_mean, Smoothness_mean,
# Compactness_mean,Concavity_mean,Concave_points_mean, Symmetry_mean, Fractal_dimension_mean, Radius_se,
# Texture_se, Perimeter_se, Area_se, Smoothness_se, Compactness_se, Concavity_se, Concave_points_se,
# Symmetry_se, Fractal_dimension_se, Radius_worst, Texture_worst, Perimeter_worst, Area_worst,
# Smoothness_worst, Compactness_worst, Concavity_worst,Concave_points_worst, Symmetry_worst,
# Fractal_dimension_worst]])
#print(result)

#Melakukan Input Testing 2
#MEAN
#Radius_mean = float(input("Enter radius_mean: "))
#Texture_mean = float(input("Enter texture_mean: "))
#Perimeter_mean = float(input("Enter perimeter_mean: "))
#Area_mean = float(input("Enter area_mean: "))
#Smoothness_mean = float(input("Enter smoothness_mean: "))
#Compactness_mean = float(input("Enter compactness_mean: "))
#Concavity_mean = float(input("Enter concavity_mean: "))
#Concave_points_mean= float(input("Enter concave points_mean: "))
#Symmetry_mean = float(input("Enter symmetry_mean: "))
#Fractal_dimension_mean = float(input("Enter fractal_dimension_mean: "))
#SE
#Radius_se = float(input("Enter radius_se: "))
#Texture_se = float(input("Enter texture_se: "))
#Perimeter_se = float(input("Enter perimeter_se: "))
#Area_se = float(input("Enter area_se: "))
#Smoothness_se = float(input("Enter smoothness_se: "))
#Compactness_se = float(input("Enter compactness_se: "))
#Concavity_se = float(input("Enter concavity_se: "))
#Concave_points_se = float(input("Enter concave points_se: "))
#Symmetry_se = float(input("Enter symmetry_se: "))
#Fractal_dimension_se = float(input("Enter fractal_dimension_se: "))
#worst
#Radius_worst = float(input("Enter radius_worst: "))
#Texture_worst = float(input("Enter texture_worst: "))
#Perimeter_worst = float(input("Enter perimeter_worst: "))
#Area_worst = float(input("Enter area_worst: "))
#Smoothness_worst = float(input("Enter smoothness_worst: "))
#Compactness_worst = float(input("Enter compactness_worst: "))
#Concavity_worst = float(input("Enter concavity_worst: "))
#Concave_points_worst = float(input("Enter concave points_worst: "))
#Symmetry_worst = float(input("Enter symmetry_worst: "))
#Fractal_dimension_worst = float(input("Enter fractal_dimension_worst: "))

#result=  knModel.predict([[Radius_mean, Texture_mean, Perimeter_mean, Area_mean, Smoothness_mean,
# Compactness_mean,Concavity_mean,Concave_points_mean, Symmetry_mean, Fractal_dimension_mean, Radius_se,
# Texture_se, Perimeter_se, Area_se, Smoothness_se, Compactness_se, Concavity_se, Concave_points_se,
# Symmetry_se, Fractal_dimension_se, Radius_worst, Texture_worst, Perimeter_worst, Area_worst,
# Smoothness_worst, Compactness_worst, Concavity_worst,Concave_points_worst, Symmetry_worst,
# Fractal_dimension_worst]])
#print(result)

#import pickle

#from joblib import dump, load
#dump(knModel, 'ml_model_dkp')